@import "syntax-variables";
@import "colors.less";

atom-text-editor, :host {
  background-color: @syntax-background-color;
  color: @syntax-text-color;

  .wrap-guide {
    background-color: @syntax-wrap-guide-color;
  }

  .indent-guide {
    color: @syntax-indent-guide-color;
  }

  .invisible-character {
    color: @syntax-invisible-character-color;
  }

  .gutter {
    background-color: @syntax-gutter-background-color;
    color: @syntax-gutter-text-color;

  }

  .invisible {
    color: @syntax-text-color;
  }

  .cursor {
    color: @syntax-cursor-color;
  }

  .selection .region {
    background-color: @syntax-selection-color;
  }
}

atom-text-editor .search-results .marker .region,
:host .search-results .marker .region {
  background-color: transparent;
  border: 1px solid @syntax-result-marker-color;
}

atom-text-editor .search-results .marker.current-result .region,
:host .search-results .marker.current-result .region {
  border: 1px solid @syntax-result-marker-color-selected;
}

.comment {
  color: @light-grey;
}

.entity {
  &.name.type {
    color: @light-orange;
  }

  &.other.inherited-class {
    color: @green;
  }
}

.keyword {
  color: @purple;

  &.control {
    color: @purple;
  }

  &.operator {
    color: @syntax-text-color;
  }

  &.other.special-method {
    color: @blue;
  }

  &.other.unit {
    color: @orange;
  }
}

.storage {
  color: @purple;
}

.constant {
  color: @orange;

  &.character.escape {
    color: @cyan;
  }

  &.numeric {
    color: @orange;
  }

  &.other.color {
    color: @cyan;
  }

  &.other.symbol {
    color: @green;
  }
  &.rgb-value {
    color: @teal;
  }
}

.variable {
  color: @red;

  &.interpolation {
    color: darken(@red, 10%);
  }

  &.parameter.function {
    color: @syntax-text-color;
  }
}

.invalid.illegal {
  background-color: @red;
  color: @syntax-background-color;
}

.string {
  color: @green;


  &.regexp {
    color: @cyan;

    .source.ruby.embedded {
      color: @orange;
    }
  }

  &.other.link {
    color: @red;
  }
}

.punctuation {
  &.definition {
    &.comment {
      color: @light-grey;
    }

    &.string,
    &.variable,
    &.parameters,
    &.array {
      color: @syntax-text-color;
    }

    &.heading,
    &.identity {
      color: @blue;
    }

    &.bold {
      color: @light-orange;
      font-weight: bold;
    }

    &.italic {
      color: @purple;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: darken(@red, 10%);
  }

}

.support {
  &.class {
    color: @light-orange;
  }

  &.function  {
    color: @cyan;

    &.any-method {
      color: @blue;
    }
  }
}

.entity {
  &.name.function {
    color: @blue;
  }

  &.name.class, &.name.type.class {
    color: @light-orange;
  }

  &.name.section {
    color: @blue;
  }

  &.name.tag {
    color: @red;
  }

  &.other.attribute-name {
    color: @orange;

    &.id {
      color: @blue;
    }
  }
}

.meta {
  &.class {
    color: @light-orange;
  }

  &.link {
    color: @orange;
  }

  &.require {
    color: @blue;
  }

  &.selector {
    color: @purple;
  }

  &.separator {
    background-color: @grey;
    color: @syntax-text-color;
  }
}

.none {
  color: @syntax-text-color;
}

.markup {
  &.bold {
    color: @orange;
    font-weight: bold;
  }

  &.changed {
    color: @purple;
  }

  &.deleted {
    color: @red;
  }

  &.italic {
    color: @purple;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @blue;
  }

  &.inserted {
    color: @green;
  }

  &.list {
    color: @red;
  }

  &.quote {
    color: @orange;
  }

  &.raw.inline {
    color: @green;
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @green;
  }
}

atom-text-editor[mini] .scroll-view,
:host([mini]) .scroll-view {
  padding-left: 1px;
}


// COMENTS, DUHR
.comment {
  color: @comment;
  background: @comment-bg;
  font-style: italic;
}


.keyword {

  // @ of @font-face & @media
  color: @keyword;

  // try, catch, if, else, return (js)
  &.control {
    color: @keyword;

    &.import.include {
      color: #D598FF;
    }
  }

  // =, +, -, ?, :, !=. &&, in (js)
  &.operator {
    color: @keyword;
  }

  // can't tell what this does :/
  &.other.special-method {
    color: @keyword;
  }

  // can't tell what this does :/
  &.other.unit {
    color: @keyword;
  }
}


// STORAGE |
.storage {
  color: @storage;

  // var of var a = b;
  &.modifier {
    color: @storage;
  }

}


.constant {

  // true, false, null, undefined
  color: @constant;

  // \ of ("what\'s")
  &.character.escape {
    color: @constant;
  }

  // all the numbers!
  &.numeric {
    color: @numeric;
  }

  // can't tell what this does :/
  &.other.color {
    color: @constant;
  }

  // can't tell what this does :/
  &.other.symbol {
    color: @constant;
  }
}



.variable {

  // this (js), @varable_name (sass), http://web.com of url(http://web.com), variable of {{variable}} (handlebars)
  color: @variable;

  // can't tell what this does
  &.interpolation {
    color: @variable;
  }

  // foo & bar of function name(foo, bar)
  &.parameter.function {
    color: @function-param;
  }
}


// INVALID TEXT
.invalid.illegal, .invalid.deprecated {
  background: none;
  color: @error;
}

.string {

  .json {

  }

  // 'value' of var='value', "name.png" or src="name.png"  , etc
  color: @string;

  // REGEX - [\da-z] of /-([\da-z])/gi (js)
  .constant {
    color: @regex;
  }

  &.regexp {

    // ?:input, select, textarea, button of  /^(?:input|select|textarea|button)$/i,
    color: @regex;

    .constant.character.escape,
    .source.ruby.embedded,
    .string.regexp.arbitrary-repitition {
      color: @regex;
    }

    &.group {
      color: @regex;
    }

    &.character-class {
      color: @regex;
    }

    .source.ruby.embedded {
      color: @regex;
    }

  }

  // site.dir in {{site.dir}}
  .variable {
    color: @variable;
  }

  // can't tell what this does :/
  &.other.link {
    color: @string;
  }
}

// String interpolation in Ruby, CoffeeScript, and others
.source .string {
  .source,
  .meta.embedded.line {
    color: @string;
  }

  .punctuation.section.embedded {
    color: @string;

    .source {
      color: @string;  // Required for the end of embedded strings in Ruby # 716
    }
  }
}

// MISC PUNCTUATION
.punctuation {

  &.terminator {
    color: @punctuation;
  }

  &.separator {
    color: @punctuation;
  }

  &.definition {

    color: @punctuation;

    &.comment {
      color: @comment-punc;
    }

    // QUOTES
    &.string,
    &.variable,
    &.array {
      color: @string;
    }

    &.parameters {
      color: @code-font-color;
    }

    &.heading,
    &.identity {
      color: @code-font-color;
    }

    &.bold {
      color: @code-font-color;
      font-weight: bold;
    }

    &.italic {
      color: @code-font-color;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: @code-font-color;

  }

}



.support {

  // background of background: none,
  color: @support;

  // SUPPORT | module of module.exports
  &.class {
    color: @support;
  }

  &.function  {
    color: @support; // .log of console.log, url of url(http://web.com)

    // can't tell what this does :/
    &.any-method {
      color: @support;
    }
  }

  // {{}} of {{ variable }}
  &.constant {
    color: @constant;  // none of text-decoration: none;
  }

  &.type.property-name.css {
    color: @support;
  }
}

// .class names in css & scss
.source .entity.name.tag, .source .entity.other.attribute-name, .meta.tag.inline, .meta.tag.inline .entity {
  color: @class;
}

  &.tag,
  &.tag .entity {
    color: @tag-entity;
  }


.html {

  .string {
    color: rgba(255, 251, 176, 0.71);;
  }


  // inline elements - <span>
  .meta {


  }

  .punctuation.definition.tag {
    color: rgba(158, 158, 158, 1);
  }

  .entity {

    &.name.tag {
      text-decoration: done;

      // structural elements - <html>
      &.structure {
        color: @tag;
      }

      // block level elements - <div>, <h1>
      &.block {
        color: #F98DEB;
      }

      // inline elements - <span>
      &.script {
        // color: @tag;
      }

    }

    &.other {
      &.attribute-name {
        color: rgba(255, 163, 20, 0.78);
      }
    }

  }

}

// ENTITY | exports of module.exports, <div id= of <div id="#id">, . of .className
.entity {

  color: @entity;

  // console of console.log (js)
  &.name.type {
    color: @entity;
    text-decoration: none;
  }

  &.other.inherited-class {
    color: @entity;
  }

  // init in init: function(){} (js)
  &.name.function {
    color: @entity;
  }

  &.name.class, &.name.type.class {
    color: @entity;
  }

  &.name.section {
    color: @entity;
  }

  // div of <div> (html), body of body{} (css)
  &.name.tag {
    color: @tag;
    text-decoration: done;
  }


  // CSS CLASSES
  &.other.attribute-name {
    color: @element-attr;

    // CSS ID's
    &.id {
      color: @id;
    }
  }
}

.meta {

  &.link {
    color: @meta;
  }

  &.require {
    color: @meta;
  }


  &.brace {

    // curly braces - {}
    &.curly {
      color: @brackets;
    }

    // parenthesis - ()
    &.round {
      color: @code-font-color;
    }
  }

  &.comma {
    color: @punctuation;
  }

  // .css files | commas, ([controls]) of audio:not([controls])
  &.selector {
    color: @punctuation;
  }

  &.separator {
    background-color: @punctuation;
    color: @punctuation;
  }
}

.none {
  color: @code-font-color;
}

.markup {
  &.bold {
    color: @markup;
    font-weight: bold;
  }

  &.changed {
    color: @markup;
  }

  &.deleted {
    color: @markup;
  }

  &.italic {
    color: @markup;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @markup;
  }

  &.inserted {
    color: @markup;
  }

  &.list {
    color: @markup;
  }

  &.quote {
    color: @markup;
  }

  &.raw.inline {
    color: @markup;
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @code-font-color;
  }
}


atom-text-editor[mini], :host(.mini) {
 .scroll-view {
    padding-left: 1px;
  }
}

@import "colors.less";

// EDITOR BACKGROUND & FONT COLORS
.atom-text-editor, :host {
  background-color: @code-background;
  color: @code-font-color;
}

// MAIN CODE EDITOR STYLES
.atom-text-editor, :host {

  background-color: @code-background;
  color: @code-font-color;

  // border-top: solid 6px @selected-line;

  // LINE THAT DESIGNATES WHERE TEXT WILL WRAP
  .wrap-guide {
    background: @guides;
  }

  // LINE BETWEEN BRACKET INDENTATIONS
  .indent-guide {
    color: @guides;
  }


  .invisible-character {
    color: @invisible;
  }

  // GUTTER / LINE NUMBERS
  .gutter {

    background-color: @gutter-background;
    color: @gutter-text;
    // border-right: 10px solid @code-background;

    .line-number {

      // GUTTER BACKGROUND
      background: @gutter-background;
      color: @gutter-text;
      padding-left: 10px;

      // SELECTED BLOCK
      &.cursor-line {
        background-color: @gutter-background-highlight;
        color: @gutter-text-highlight;
        font-weight: 100;
      }

      // CURRENT ACTIVE LINE
      &.cursor-line-no-selection {
        background-color: @gutter-background-highlight !important;
        color: @gutter-text-highlight;
        font-weight: bold;
        border-left: 1px solid @orange;
        border-bottom: dashed .1em rgba(255, 116, 0, 0.69);

      }

    }

    // HOVER STATE FOR LINE NUMBERS
    .line-number:hover {
      background-color: @gutter-background !important;
      color: @gutter-text-highlight;
    }

    .icon-right {
      display: inline-block;
      visibility: hidden;
      opacity: 1;
      padding: 0 .4em;
      color: rgb(255, 255, 255);
    }
    .line-number .icon-right::before {
      font-family: 'Octicons Regular';
      font-weight: normal;
      font-style: normal;
      display: inline-block;
      line-height: 1;
      -webkit-font-smoothing: antialiased;
      text-decoration: none;
      font-size: 0.9em;
      width: 0.9em;
      height: 0.9em;
      content: "\f0a3";
    }

  }

  // LINE NUMBER FOR SECTIONS THAT HAVE BEEN COLLAPSED
  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: #ee0e3e;
    background: @gutter-text;
  }

  // INVISIBLE CHARACTES
  .invisible {
    color: @invisible;
  }

  // CURSOR COLOR
  .cursor {
    border-color: @cursor-color !important;
    border-left: solid @cursor-width;
  }

  // BACKGROUND OF SELECTED TEXT
  .selection .region {
    // background-color: rgba(230,205,105,0.2);
    // border: solid 1px rgba(230,205,105,0.5);
    background-color: @selected;
    border: solid 1px @selected-border;
  }


  // ADD LEFT PADDING TO CODE VIEW
  .scroll-view {
    padding-left: 10px;
  }


  // SELECTED LINE STYLE
  .line.cursor-line {
    background: @selected-line !important;
    background: rgba(26, 255, 0, 0.1) !important;
    // padding-left: 10px;
    // margin-left: -10px;
    border-bottom: dashed .1em rgba(255, 116, 0, 0.69);
  }

  atom-pane.active {
    background-color: #8f5e46;
  }

}

.bracket-matcher .region {
  border-radius: 2px;
  background-color: rgba(255, 0, 222, 0.53);
  border-bottom: 0px;
}
